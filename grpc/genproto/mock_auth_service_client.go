// Code generated by mockery v2.53.3. DO NOT EDIT.

package genproto

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockAuthServiceClient is an autogenerated mock type for the AuthServiceClient type
type MockAuthServiceClient struct {
	mock.Mock
}

// Login provides a mock function with given fields: ctx, in, opts
func (_m *MockAuthServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *LoginRequest, ...grpc.CallOption) (*LoginResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *LoginRequest, ...grpc.CallOption) *LoginResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LoginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *LoginRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewJwt provides a mock function with given fields: ctx, in, opts
func (_m *MockAuthServiceClient) NewJwt(ctx context.Context, in *NewJwtRequest, opts ...grpc.CallOption) (*NewJwtResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NewJwt")
	}

	var r0 *NewJwtResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *NewJwtRequest, ...grpc.CallOption) (*NewJwtResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *NewJwtRequest, ...grpc.CallOption) *NewJwtResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*NewJwtResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *NewJwtRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Refresh provides a mock function with given fields: ctx, in, opts
func (_m *MockAuthServiceClient) Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Refresh")
	}

	var r0 *RefreshResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *RefreshRequest, ...grpc.CallOption) (*RefreshResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *RefreshRequest, ...grpc.CallOption) *RefreshResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RefreshResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *RefreshRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, in, opts
func (_m *MockAuthServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *RegisterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *RegisterRequest, ...grpc.CallOption) (*RegisterResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *RegisterRequest, ...grpc.CallOption) *RegisterResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RegisterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *RegisterRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeJwt provides a mock function with given fields: ctx, in, opts
func (_m *MockAuthServiceClient) RevokeJwt(ctx context.Context, in *RevokeJwtRequest, opts ...grpc.CallOption) (*RevokeJwtResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RevokeJwt")
	}

	var r0 *RevokeJwtResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *RevokeJwtRequest, ...grpc.CallOption) (*RevokeJwtResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *RevokeJwtRequest, ...grpc.CallOption) *RevokeJwtResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RevokeJwtResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *RevokeJwtRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Validate provides a mock function with given fields: ctx, in, opts
func (_m *MockAuthServiceClient) Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 *ValidateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ValidateRequest, ...grpc.CallOption) (*ValidateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ValidateRequest, ...grpc.CallOption) *ValidateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ValidateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ValidateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockAuthServiceClient creates a new instance of MockAuthServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthServiceClient {
	mock := &MockAuthServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
